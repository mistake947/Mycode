Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.

 https://leetcode.com/problems/intersection-of-two-arrays/

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Explanation: [4,9] is also accepted.



class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        vector<int>v;
        unordered_set<int>s1,s2;
        for(auto n:nums1)
            s1.insert(n);
        for(auto n:nums2)              dono array ko unordered map mai daal lo fir 1st ke elenmet 2nd mai search kr lo
            s2.insert(n);
        for(auto n:s2)
        {
            if(s1.find(n)!=s1.end())
            {
                auto it=s1.find(n);
                
                v.push_back(*it);
            }
        }
        return v;
        
    }
};


class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        
        vector<int>v;
        // int s1=nums1.size();
        // int s2=nums2.size();
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(),nums2.end());
        
//         if(s1>s2)
//         {
//            intersection(nums2,nums1);
//         }
        
        for(int i=0;i<nums1.size();i++)
        {
            if(binary_search(nums2.begin(), nums2.end(),nums1[i] ) && ! binary_search(v.begin(),v.end(),nums1[i]))
            {
                v.push_back(nums1[i]);
            }
                
        }
        return v;
        
        
        // vector<int> ans;
        // sort(nums1.begin(), nums1.end());
        // sort(nums2.begin(), nums2.end());
        // for(auto i: nums1){
        //     if(binary_search(nums2.begin(), nums2.end(), i) 
        //             && !binary_search(ans.begin(), ans.end(), i)) ans.push_back(i);
        // }
        // return ans;
    }
};
