Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

https://leetcode.com/problems/majority-element-ii/

Follow-up: Could you solve the problem in linear time and in O(1) space?

 

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]
 



class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        
        vector<int>v;
        int m1=-1,m2=-1,c1=0,c2=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==m1)c1++;
            else if(nums[i]==m2)c2++;
            else if(c1==0)
            {
                m1=nums[i];
                c1=1;
            }
             else if(c2==0)
            {
                m2=nums[i];
                c2=1;
            }
            else 
                c1--,c2--;
        }
        int count1=0,count2=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==m1) count1++;
            else if(nums[i]==m2) count2++;
            
        }
        if(count1>nums.size()/3) v.push_back(m1);
        if(count2>nums.size()/3) v.push_back(m2);
        
        return v;
        
    }
};
